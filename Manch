from itertools import chain
import random
import copy
player=1
B=[['  ' , '  ' , '  ' , '  ' , '  ' , '  ' , '  ' , '  ' , '  ' , '  '] ,
   ['  ' , '  ' , '  ' , '  ' , '  ' , '  ' , '  ' , '  ' , '  ' , '  '] ,
   ['  ' , '  ' , '  ' , '  ' , '  ' , '  ' , '  ' , '  ' , '  ' , '  '] ,
   ['  ' , '  ' , '  ' , '  ' , '  ' , '  ' , '  ' , '  ' , '  ' , '  ']]

B1=['  ' , '  ' , '  ' , '  ']
B2=['  ' , '  ' , '  ' , '  ']
B3=['  ' , '  ' , '  ' , '  ']
B4=['  ' , '  ' , '  ' , '  ']
chains=[["Y1" , "Y2" , "Y3" , "Y4"] , ["G1" , "G2" , "G3" , "G4"] , ["R1" , "R2" , "R3" , "R4"] ,
    ["P1" , "P2" , "P3" , "P4"]]
path1=copy.deepcopy(B+B1)
path2=copy.deepcopy(B[1:]+B[0]+B2)
path3=copy.deepcopy(B[2:]+B[:2]+B3)
path4=copy.deepcopy(B[3]+B[:3]+B4)

players=["Yellow","Blue","Red","Purple"]
def show_board():
 print("\n"*100)
 Board=[[chains[0][0:2] , ["  "*3] , B[0][-1:-3:-1] , [B[1][0]] , ["  "*3] , chains[1][0:2]] ,
       [chains[0][2:4] , ["  "*3] , [B[0][-3]] , [B1[0]] , [B[1][1]] , ["  "*3] , chains[1][2:4]] ,
       [["  "*7] , [B[0][-4]] , [B2[1]] , [B[1][2]] , ["  "*7]] ,
       [["  "*7] , [B[0][-5]] , [B2[2]] , [B[1][3]] , ["  "*7]] ,
       [B[0][0:5] , [B2[3]] , B[1][4:9]] ,
       [[B[3][-1]] , B1 , ["# "] , B3[-1::-1] , [B[1][-1]]] ,
       [B[3][-2:-7:-1] , [B4[3]] , B[2][4::-1]] ,
       [["  "*7], [B[3][3]] , [B4[2]] , [B[2][5]] ,["  "*7]] ,
       [["  "*7] , [B[3][2]] , [B4[1]] , [B[2][6]] ,["  "*7]] ,
       [chains[3][0:2] , ["  "*3] , [B[3][1]] , [B4[0]] , [B[2][-3]] , ["  "*3] , chains[2][0:2]] ,
       [chains[3][2:4] , ["  "*3] , [B[3][0]] , B[2][-1:-3:-1] , ["  "*3] , chains[2][2: 4]]]
 unders=['|---|---|       |---|---|---|       |---|---|',
        '|--------       |---|---|---|       --------|',
        '|               |---|---|---|               |',
        '|---------------|---|---|---|---------------|',
        '|---|---|---|---|---|---|---|---|---|---|---|',
        '|---|---|---|---|---|---|---|---|---|---|---|',
        '|---------------|---|---|---|---------------|',
        '|               |---|---|---|               |',
        '|--------       |---|---|---|       --------|',
        '|---|---|       |---|---|---|       |---|---|',
        '---------------------------------------------']
 print('-'*45)
 for row,rw in zip(Board,unders):
    for value in list ( chain ( *row ) ):
        print ( "|" , value , end='' )
    print ( "|" )
    print(rw)

# TODO Players number
while True:
     u=eval(input("Enter The Number Of Player: "))
     if 1<=u<=4:
         for i in range(len(chains)):
             if i>=u:
                 chains[i]=["  ","  ","  ","  "]
                 B[i][0]="  "
         break

     else:
         print("Players can be 1 to 4 person")




def move () :
 input("Player %d's Turn \nPress Enter To Roll Dice"%player)
 m=random.randrange( 1 , 7 )
 print("the number on dice is: %d "%m )
 if m == 6 and ((list(chain(*chains[player-1]))).count(players[player-1][0]) )==4:
     path=list(chain(*eval("path%d"%player)))
     if not path[0].isspace():
         for j,i in enumerate(players):
             if i[0]==path[0][0]:
                 chains[j][eval ( path[0][1] ) - 1]==path[0]
     path[0]=chains[player-1][0]
     chains[player - 1][0]="  "

 elif (m == 6 and 0<((list(chain(*chains[player-1]))).count(players[player-1][0]) )<4):
   while True:
    question=input("if you want to enter a chain press any key or choose one of chain to move: " )
    if question=='':
        path=list(chain(*eval("path%d"%player)))
        if not path[0].isspace ():
            for j , i in enumerate ( players ):
                if i[0]==path[0][0]:
                    chains[j][eval ( path[0][1] ) - 1]==path[0]
        path[0]=chains[player-1][chains[player-1].index("  ")+1]
        chains[player - 1][chains[player - 1].index ( "  " ) + 1]="  "
        break
    elif 1<=question<=4 :

        if chains[player-1][question-1].isspace():
           a="%d%s"%(players[player-1][0],question)
           b=list(chain(*eval("path%d"%player)))
           c=(b.index(a))+m
           if c<=len(b):
               if not b[b.index(a)+m].isspace():
                   for i in players:
                       if i[0]==b[b.index ( a ) + m][0]:
                           chains[i][eval(b[b.index ( a ) + m][1])-1]==b[b.index(a)+m]
               b[b.index(a)+m]=a
               b[b.index (a)]=' '
               break
           else:
               print("You can't move this chain as 6")

        else:
           print(" This chain is not in board")

    else:
       print("Wrong input")

 elif 0<((list(chain(*chains[player-1]))).count(players[player-1][0]) )<4:

     choose=eval(input("Enter The chain that u want to move"))
     if chains[player-1] [choose-1]=="  ":
        a="%d%s"%(players[player - 1][0] , choose)
        b=list(chain(*eval("path%d"%player)))
        c=(b.index ( a )) + m
        if c<=len ( b ):
           if not b[b.index ( a ) + m].isspace ():
             for j,i in enumerate(players):
                  if i[0]==b[b.index ( a ) + m][0]:
                     chains[j][eval ( b[b.index ( a ) + m][1] ) - 1]==b[b.index ( a ) + m]
           b[b.index ( a ) + m]=a
           b[b.index ( a )]=' '
        else:
            print|("You cant move this chain for this dice, choose another choice")
     #remove others
     #non remove ours by print u can't remove % chain it is urself


def change_palyer():
        global player
        # player = 2 if player == 1 else 1
        player=player%u + 1


def winner():
    for i in range(1,5):
       t=0
       for j in eval("B%d"%i):
           if j[0]==players[i-1][0]:
                t+=1
       if t  ==4:
            print ( "the player %d is winner"%i )
            return True
#

while not winner():
    show_board()
    move()
    change_palyer()
